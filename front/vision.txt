# Manifest Liberation, Naturally Free (MLNF)

## Project Vision
A digital sanctuary for free-thinkers to:
- Crowdsource truth and knowledge typically concealed by conventional censorship
- Engage in meaningful discourse without fear of censorship
- Build a timeless community of like-minded individuals
- Transcend conventional boundaries of thought and expression

## Core Philosophy
- Immortality
- truth
- freedom
- Direct Democracy

## MLNF Project: Status & Vision (Post-Spring Cleaning [Date of This Session])

**Current Status:**
The initial "Spring Cleaning" phase has concluded, resulting in a significantly more organized, modular, and efficient codebase for the Manifest Liberation, Naturally Free (MLNF) project. Key achievements include:
*   Clear separation of frontend (`front/`) and backend (`back/`) concerns.
*   Resolution of backend Git/`node_modules` issues.
*   Extensive removal of redundant files and inline CSS/JS from the frontend.
*   Centralization of CSS variables (`base-theme.css`) and component styles (`components/shared/styles.css`, `active-users.css`, etc.).
*   Creation/refinement of shared JavaScript components (`messageModal.js`, `userMenu.js`, `authModal.js`, etc.) and more consistent usage patterns.
*   Improved clarity in CSS structure, with `styles.css` focusing on global rules and page-specific stylesheets handling unique page elements (e.g., `souls-listing.css`, `blog.css`).

The project is now well-positioned for continued feature development and scaling.

**Strategic Development Pillars Moving Forward (Post-Cleanup Focus):**

1.  **Core Feature Implementation (Sanctuary Experience):**
    *   **Placeholder Page Development:** Systematically build out the functionality for existing placeholder pages (`news.html`, `debate.html`, `mindmap.html`, `archive.html`), fully leveraging the shared component architecture and CSS framework established during the cleanup.
    *   **Eternal Souls & Interactions:** Develop features for user profiles, connections, and interactions as envisioned for the "Eternal Souls" concept.
    *   **Soul Scrolls (Blogging Platform):** Implement the full lifecycle for creating, reading, updating, and deleting blog posts, including user-specific views and management.
    *   **Echoes Unbound (Message Board):** Design and build the message board functionality, including threads, posts, replies, and user moderation capabilities if applicable.
    *   **Boundless Chronicles, Clash of Immortals, Infinite Nexus, Timeless Vault:** Define and implement the unique features associated with these sections, ensuring they align with the project\'s core themes of free thought and timelessness.

2.  **Robust Backend Services & API Development:**
    *   Continue developing secure and efficient Express.js API endpoints to support all frontend features.
    *   Focus on clear data models for MongoDB, ensuring data integrity and scalability.
    *   Implement comprehensive data validation, authentication, and authorization for all API interactions.

3.  **Enhanced Frontend Architecture & UX:**
    *   **Shared Utilities:** Evaluate and create shared JavaScript utilities where appropriate (e.g., for `jwt-decode`, advanced DOM manipulation, or common data transformations) to keep page-specific scripts lean.
    *   **State Management (Conditional):** As application complexity grows, if `localStorage` and basic event-driven communication become insufficient, explore lightweight global state management solutions suitable for Vanilla JS (or consider a micro-frontend framework if modularity needs to be pushed further).
    *   **Accessibility (A11y):** Continuously integrate accessibility best practices (semantic HTML, ARIA attributes, keyboard navigation, color contrast) into all new components and pages.
    *   **Performance Optimization:** Monitor frontend performance (load times, rendering speed) and optimize as needed (e.g., code splitting if JS bundles grow large, image optimization, further caching strategies).
    *   **User Experience (UX):** Prioritize intuitive navigation, clear user feedback, and an engaging interface that reflects the MLNF theme.

4.  **Development Operations & Quality Assurance:**
    *   **Testing:** Introduce a testing strategy, including unit tests for critical JavaScript logic (both frontend and backend) and potentially end-to-end tests for key user flows.
    *   **CI/CD (Future):** Consider setting up a Continuous Integration/Continuous Deployment pipeline to automate testing and deployments, especially as the team or complexity grows.
    *   **Security Audits:** Periodically review the application for security vulnerabilities, particularly around user authentication, data storage, and input handling.

**Guiding Principles for Future Development (Post-Cleanup Focus):**

*   **Modularity & Reusability:** Continue to build with shared components and utilities in mind.
*   **Clarity & Maintainability:** Write clean, well-commented (where non-obvious) code.
*   **User-Centricity:** Design features and experiences with the end-user\'s needs and the project\'s core values at the forefront.
*   **Iterative Progress:** Develop incrementally, releasing and testing features progressively.

This vision aims to guide MLNF towards becoming a robust, engaging, and timeless sanctuary for its users.

---
## Core Features & Development Status (Original Detailed Vision)

### Phase 1 - Foundation (Current)
âœ… Basic Authentication
  - User signup/login
  - JWT-based sessions (30-day duration)
  - Profile management
âœ… Responsive Design Base
  - Mobile-first approach
  - Stacked logo adaptation
âœ… Basic UI Components
  - Light/Dark theme toggle
  - Global navigation

### Phase 2 - Community Features (Next)
ðŸ”„ Message Board
  - Thread creation/management
  - Nested comments
  - Rich text editing
  - Content moderation tools
  - Direct Democracy voting
ðŸ”„ User Profiles
  - Customizable profiles
  - Activity history
  - User roles (regular, moderator, admin)
  - Profile privacy settings
  - Soul Journal (private/public thought sharing)
    -historical statuses
  - Status indicators with visibility options
ðŸ”„ Real-time Features
  - Online user sidebar
  - Direct messaging system
  - Notification system

### Phase 3 - Knowledge Base
ðŸ“‹ Mindmap System
  - Collaborative knowledge mapping
  - Version control for edits
  - Citation system
ðŸ“‹ Debate Arena
  - Structured debate format
  - Argument tracking
  - Voting system
ðŸ“‹ News Aggregation
  - User-submitted stories
  - Source credibility tracking
  - Community fact-checking
ðŸ“‹ Eternal Truth Verification
  - Claim identification system
  - Living evidence repository
  - Real-time consensus tracking
  - Evidence threading
  - Historical trend visualization
ðŸ“‹ Knowledge Bookmarks
  - Personal collections
  - Content tagging
  - Search functionality
  - Curated reading lists

### Phase 4 - Media & Content
ðŸ“‹ Media Archive
  - Video/audio uploads
  - Content categorization
  - Backup system
ðŸ“‹ Blogging Platform
  - Rich text editor
  - Media embedding
  - Comment system

## Technical Architecture

### Frontend (front/)
- Framework: Vanilla JS (considering future framework adoption)
- Hosting: GitHub Pages via mlnf.net (Cloudflare proxy)
- Repository: github.com/ImmortalAl/mlnf

### Backend (back/)
- Framework: Express.js
- Database: MongoDB Atlas
- Hosting: render.com
- Repository: github.com/ImmortalAl/mlnf-auth

### Security Measures
- JWT-based authentication
- Rate limiting
- Input validation
- XSS protection
- CORS configuration

## User Experience Design

### User Flow & Navigation
- Lander.html serves as "base camp"/dashboard for logged-in users
- Welcome message modal for new users explaining site philosophy
- Clear separation between personal profile ("My Soul") and community directory ("Eternal Souls")
- Structured dropdown menu with logical grouping of features

### URL Structure
- /profile - Personal profile and dashboard
- /profile/edit - Profile customization
- /souls - Community directory (replacing profiles.html)
- /souls/username - Individual user profiles

### Profile Architecture
- Privacy tiers for profile visibility and discoverability
- Automatic online detection with privacy toggle
- Custom status messages
- Personal analytics visible only to profile owner
- Option to make profiles invitation-only
- Contact permission settings

### Community Features
- Thought Messengers
  - Thread-based communication
  - Option to publish valuable exchanges

## Development Notes

### Current Focus
- Implementing message board functionality
- Enhancing user profiles
- Setting up real-time features
- Developing Soul Journal functionality

### Known Issues
- Case-sensitive file paths causing import issues
- Need for comprehensive error handling
- Backend route organization needs improvement

### Future Considerations
- Robust Administrative Control Center
- Chatroom
- Potential migration to a frontend framework
- Scaling strategy for media storage
- Community moderation tools
- Content backup systems
- Philosophical Compass for visualizing user stance on key concepts
- Advanced settings page with comprehensive controls:
  - Account settings
  - Privacy controls
  - Notification preferences
  - Appearance customization
  - Content filters
  - Security options
  - Data management
- Soul Connections (future)
  - Non-reciprocal following system
  - Mental proximity visualizations
  - Trust networks
  - Collaborative potential matching
- Soul Resonance (future)
  - Algorithmic intellectual compatibility matching
  - Based on content interactions not popularity

## Directory Structure (frontend and backend are siblings nested within C:\\Users\\coold\\Documents\\Sites\\MLNF\\)
Frontend (front/):
\`\`\`
â”œâ”€â”€ assets/
â”‚   â”œâ”€â”€ images/
â”‚   â””â”€â”€ uploads/
â”œâ”€â”€ css/
â”œâ”€â”€ js/
â”œâ”€â”€ pages/
â””â”€â”€ components/
\`\`\`

Backend (back/):
\`\`\`
â”œâ”€â”€ routes/
â”œâ”€â”€ models/
â”œâ”€â”€ middleware/
â”œâ”€â”€ config/
â””â”€â”€ uploads/
\`\`\`

## Development Guidelines
1. Mobile-first responsive design
2. Consistent error handling
3. Comprehensive logging
4. Security-first approach
5. Performance optimization
6. Clear documentation
7. Focus on quality of exchange over quantity

## Next Steps
(Original content from front/vision.txt including any potentially missing lines would continue here... ensure the original ending is preserved if it contained specific actionable next steps not covered elsewhere.) 